name: ci

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
  release:
    types: [published]
  schedule:
    - cron: 0 0 * * 0

jobs:
  lint:
    runs-on: ubuntu-latest
    if: github.event_name != 'schedule'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Set up Poetry
        uses: Gr1N/setup-poetry@v7
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
            ${{ runner.os }}-
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      - name: Check formatting with black
        if: ${{ always() }}
        run: poetry run black . --check
      - name: Lint with flake8
        if: ${{ always() }}
        run: poetry run flake8 . --count --show-source --statistics
      - name: Check formatting with isort
        if: ${{ always() }}
        run: poetry run isort . --check --diff
      - name: Check typing with mypy
        if: ${{ always() }}
        run: poetry run mypy . --install-types --non-interactive --strict
  test:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.8", "3.7", "3.6"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Poetry
        uses: Gr1N/setup-poetry@v7
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
            ${{ runner.os }}-
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      - name: Test with pytest
        if: runner.os != 'Windows'
        env:
          book_id: ${{ secrets.BOOK_ID }}
        run: |
          if [ -z "$BOOK_ID" ]; then
            poetry run pytest --cov=./ --cov-report=xml
          else
            book_id="$BOOK_ID" poetry run pytest --cov=./ --cov-report=xml
          fi
      - name: Test with pytest (Windows)
        if: runner.os == 'Windows'
        env:
          book_id: ${{ secrets.BOOK_ID }}
        run: |
          if ("$Env:BOOK_ID") {
            $Env:book_id="$Env:BOOK_ID"
            poetry run pytest --cov=./ --cov-report=xml
          } else {
            poetry run pytest --cov=./ --cov-report=xml
          }
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        if: ${{ always() }}
        env:
          OS: ${{ matrix.os }}
          PYTHON: ${{ matrix.python-version }}
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          flags: unittests
          verbose: true
  package:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Set up Poetry
        uses: Gr1N/setup-poetry@v7
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry/virtualenvs
          key: ${{ runner.os }}-poetry-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-
            ${{ runner.os }}-
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      - name: Build package
        run: poetry build --no-interaction
      - name: Publish package
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }} --no-interaction
          poetry publish --no-interaction
