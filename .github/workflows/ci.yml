name: ci

on:
  push:
  pull_request:
  release:
    types: [published]

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Set up Poetry
        uses: Gr1N/setup-poetry@v7
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      - name: Check formatting with black
        if: ${{ always() }}
        run: poetry run black . --check
      - name: Lint with flake8
        if: ${{ always() }}
        run: poetry run flake8 . --count --show-source --statistics
      - name: Check formatting with isort
        if: ${{ always() }}
        run: poetry run isort . --check --diff
      - name: Check types with mypy
        if: ${{ always() }}
        run: poetry run mypy .
  test:
    strategy:
      matrix:
        os: [macos-latest, ubuntu-latest, windows-latest]
        python-version: ["3.10", "3.9", "3.8", "3.7"]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Set up Poetry
        uses: Gr1N/setup-poetry@v7
      - name: Cache dependencies (Linux)
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Linux')
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-
      - name: Cache dependencies (macOS)
        uses: actions/cache@v2
        if: startsWith(runner.os, 'macOS')
        with:
          path: ~/Library/Caches/pypoetry
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-
      - name: Cache dependencies (Windows)
        uses: actions/cache@v2
        if: startsWith(runner.os, 'Windows')
        with:
          path: "C:\\Users\\runneradmin\\AppData\\Local\\pypoetry\\Cache"
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      - name: Test with pytest
        env:
          TESTS_BOOK_URL: ${{ secrets.TESTS_BOOK_URL }}
        run: poetry run pytest --cov=./ --cov-report=xml
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v2
        if: ${{ always() }}
        env:
          OS: ${{ matrix.os }}
          PYTHON: ${{ matrix.python-version }}
        with:
          env_vars: OS,PYTHON
          fail_ci_if_error: true
          flags: unittests
          verbose: true
  package:
    needs: [lint, test]
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python 3
        uses: actions/setup-python@v2
        with:
          python-version: "3.x"
      - name: Set up Poetry
        uses: Gr1N/setup-poetry@v7
      - name: Cache dependencies
        uses: actions/cache@v2
        with:
          path: ~/.cache/pypoetry
          key: ${{ runner.os }}-poetry-${{ matrix.python-version }}-${{ hashFiles('poetry.lock') }}
          restore-keys: |
            ${{ runner.os }}-poetry-${{ matrix.python-version }}-
      - name: Install dependencies
        run: poetry install --no-interaction --no-root
      - name: Build package
        run: poetry build --no-interaction
      - name: Publish package
        run: |
          poetry config pypi-token.pypi ${{ secrets.PYPI_API_TOKEN }} --no-interaction
          poetry publish --no-interaction
